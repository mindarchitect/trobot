<Window x:Class="TRobot.Robots.WarehouseRobotControlPanel"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"        
        xmlns:core="clr-namespace:TRobot.Core.Enums;assembly=TRobot.Core"
        xmlns:validators="clr-namespace:TRobot.Core.UI.Validators;assembly=TRobot.Core.UI"        
        xmlns:converters="clr-namespace:TRobot.Core.UI.Converters;assembly=TRobot.Core.UI"
        mc:Ignorable="d"
        SizeToContent="WidthAndHeight"
        Title="Warehouse robot control panel"        
        Height="190"       
        ResizeMode="NoResize">  
    <Window.Resources>
        <Style TargetType="{x:Type ToggleButton}"
           x:Key="ToggleButtonStyle">            
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Content" Value="Stop" />                    
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Content" Value="Start" />                    
                </Trigger>                
            </Style.Triggers>
            <Setter Property="Margin" Value="5,5,5,5" />
            <Setter Property="Padding" Value="5,5,5,5" />
            <Setter Property="MinWidth" Value="80" />
            <Setter Property="MaxWidth" Value="200" />
        </Style>        

        <Style x:Key="ReadOnlyText" TargetType="{x:Type TextBox}">
            <Setter Property="Margin" Value="0,5,5,0" />
            <Setter Property="IsReadOnly" Value="True" />
        </Style>

        <Style x:Key="Label" TargetType="{x:Type Label}">
            <Setter Property="Margin" Value="5,5,5,5" />
            <Setter Property="Padding" Value="5,5,5,5" />
        </Style>

        <Style x:Key="TextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Margin" Value="5,5,5,5" />
            <Setter Property="Padding" Value="5,5,5,5" />
            <Setter Property="MinWidth" Value="80" />
            <Setter Property="MaxWidth" Value="80" />
        </Style>

        <Style x:Key="Button" TargetType="{x:Type Button}">
            <Setter Property="Margin" Value="5,5,5,5" />
            <Setter Property="Padding" Value="5,5,5,5" />
            <Setter Property="MinWidth" Value="80" />
            <Setter Property="MaxWidth" Value="200" />
        </Style>

        <Style x:Key="TableLabel" TargetType="{x:Type TextBlock}">
            <Setter Property="Margin" Value="5,5,5,5" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />            
            <Setter Property="FontSize" Value="10pt" />
            <Setter Property="Padding" Value="5,5,5,5" />
        </Style>        

        <Style x:Key="CommandButtonPanel" TargetType="{x:Type StackPanel}">
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="HorizontalAlignment" Value="Right" />
        </Style>

        <Style x:Key="DestinationPointItemsHeader" TargetType="{x:Type Grid}">
            <Setter Property="Margin" Value="10,10,10,10" />            
        </Style>

        <Style x:Key="DestinationPointItems" TargetType="{x:Type ItemsControl}">
            <Setter Property="Margin" Value="10,40,10,10" />
            <Setter Property="Template">               
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">                      
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel IsItemsHost="True" />
                        </ScrollViewer>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <converters:EnumBooleanConverter x:Key="EnumBooleanConverter" />

        <DataTemplate x:Key="DestinationPointTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="20*" />
                    <ColumnDefinition Width="40*" />
                    <ColumnDefinition Width="40*" />
                </Grid.ColumnDefinitions>
                <TextBox Text="{Binding Path=Step, StringFormat='Step #0'}" Grid.Column="0" TextAlignment="Center" />                
                <TextBox Grid.Column="1" TextAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="Point.X" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validators:NumberValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <TextBox Grid.Column="2" TextAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="Point.Y" UpdateSourceTrigger="PropertyChanged">                            
                            <Binding.ValidationRules>
                                <validators:NumberValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </DataTemplate>
    </Window.Resources>

    <!-- Main window grid -->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="300" MaxWidth="330" />
            <ColumnDefinition Width="300" />        
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <GroupBox Header="Parameters" Padding="5" Margin="5">
            <!-- Left panel setting grid -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100" />
                    <ColumnDefinition Width="100" />
                    <ColumnDefinition Width="80" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />                    
                </Grid.RowDefinitions>

                <Label Grid.Column="0" Grid.Row="0" Style="{StaticResource Label}" HorizontalAlignment="Left">
                    Velocity
                </Label>
                <TextBox Grid.Row="0" Grid.Column="1" TextAlignment="Center" Style="{StaticResource TextBox}" HorizontalAlignment="Stretch" IsEnabled="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Reset}, Mode=TwoWay}">
                    <TextBox.Text>
                        <Binding Path="Robot.Settings.Velocity" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validators:NumberValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Label Grid.Column="2" Grid.Row="0" Style="{StaticResource Label}" HorizontalAlignment="Left">
                    points/sec
                </Label>
                <Label Grid.Column="0" Grid.Row="1" Style="{StaticResource Label}" HorizontalAlignment="Left">
                    Acceleration
                </Label>
                <TextBox Grid.Row="1" Grid.Column="1" TextAlignment="Center" Style="{StaticResource TextBox}" HorizontalAlignment="Stretch" IsEnabled="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Reset}}">
                    <TextBox.Text>
                        <Binding Path="Robot.Settings.Acceleration" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validators:NumberValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Label Grid.Column="2" Grid.Row="1" Style="{StaticResource Label}" HorizontalAlignment="Left">
                    points/sec2
                </Label>
            </Grid>           
        </GroupBox>

        <!-- Function Buttons -->
        <StackPanel Grid.Row="2" Grid.Column="0" Style="{StaticResource CommandButtonPanel}" HorizontalAlignment="Left">
            <ToggleButton IsChecked="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Started}}" Style="{StaticResource ToggleButtonStyle}" IsEnabled="{Binding Path=TrajectoryValidated}" Command="{Binding StartStopCommand}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />            
            <Button Style="{StaticResource Button}" Command="{Binding Path=ResetCommand}" IsEnabled="{Binding Path=TrajectoryValidated}" >
                Reset
                <Button.ToolTip>
                    <TextBlock>Reset</TextBlock>
                </Button.ToolTip>
            </Button>
            <Button Style="{StaticResource Button}" Command="{Binding Path=UploadSettingsCommand}" IsEnabled="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Reset}}" Margin="50, 5, 5, 5">
                Upload settings
                <Button.ToolTip>
                    <TextBlock>Upload settings</TextBlock>
                </Button.ToolTip>
            </Button>
        </StackPanel>

        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Grid.Row="0" Grid.Column="1" >
            <DataGrid 
                Name="TrajectoryDataGrid" 
                RowHeaderWidth="0" 
                AutoGenerateColumns="False" 
                IsReadOnly="False" 
                GridLinesVisibility="None" 
                ItemsSource="{Binding Path=TrajectoryCoordinates}" 
                CanUserAddRows="True" 
                CanUserDeleteRows="True" 
                CanUserReorderColumns="False" 
                CanUserResizeRows="False" 
                Margin="5" 
                IsEnabled="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Reset}}"
                SelectedItem="{Binding Path=SelectedTrajectoryCoordinatesItem, Mode=OneWayToSource}">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Step" MinWidth="50" Binding="{Binding Step, StringFormat='Step #0', Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></DataGridTextColumn>
                    <DataGridTextColumn Header="X" MinWidth="50" Width="*" Binding="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Y" MinWidth="50" Width="*" Binding="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></DataGridTextColumn>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Content="Delete" 
                                        Command="{Binding Path=DataContext.DeleteSelectedTrajectoryCoordinatesItemCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                        CommandParameter="{Binding}"
                                        IsEnabled="True"
                                />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </ScrollViewer>

        <!-- Function Buttons -->
        <StackPanel Grid.Row="2" Grid.Column="1" Style="{StaticResource CommandButtonPanel}" Orientation="Horizontal" HorizontalAlignment="Stretch">
            <Label  Content="{Binding Path=ConnectionState}" Style="{StaticResource Label}" HorizontalAlignment="Left" Margin="5,5,52,5" HorizontalContentAlignment="Left" Width="100" />
            <Button Style="{StaticResource Button}" Command="{Binding Path=AddDestinationPointCommand}" IsEnabled="{Binding Path=RobotState, Converter={StaticResource EnumBooleanConverter}, ConverterParameter={x:Static core:RobotState.Reset}}" HorizontalAlignment="Right" >
                Add destination point
                <Button.ToolTip>
                    <TextBlock>Add destination point</TextBlock>
                </Button.ToolTip>
            </Button>
        </StackPanel>
    </Grid>    
</Window>
